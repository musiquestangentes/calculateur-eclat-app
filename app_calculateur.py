import streamlit as st
from datetime import datetime, date
import pandas as pd
import re
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from pathlib import Path
import streamlit.components.v1 as components

# Config de la page
st.set_page_config(page_title="Simulateur ECLAT", page_icon="üéµ", layout="wide")

# Sidebar
st.sidebar.title("Musiques Tangentes")
logo_url = "https://raw.githubusercontent.com/musiquestangentes/calculateur-eclat-app/refs/heads/main/logo_2025_celine_queguiner.png"
st.sidebar.image(logo_url, width=300)

# Navigation principale
modules = [
    "Accueil",
    "Lire sa fiche de paie",
    "Coefficient, valeur du point d'indice et salaire de base",
    "Heures liss√©es",
    "Primes",
    "V√©rificateur d'heures",
    "üßÆ Simulateur complet",
    "üîó Liens utiles"
]
module = st.sidebar.radio("Navigation", modules, index=0)


# ACCUEIL

if module == "Accueil":
    st.title("Simulateur de paie - Musiques Tangentes")
    st.image(logo_url, width=400)
    st.write("""
    **Cet outil vous permet de comprendre les √©l√©ments de votre fiche de paie et de calculer vos heures et primes.**
    
    Utilisez le menu √† gauche pour naviguer entre les diff√©rents modules :
    - D√©finitions : Coefficient, valeur du point d'indice et salaire de base  
    - Lire sa fiche de paie : sch√©ma interactif  
    - Heures liss√©es  
    - Primes  
    - V√©rification de son nombre d'heures r√©elles annuelles  
    - Simulateur complet   
    - Liens utiles
    """)


# PAGE 1: LIRE SA FICHE DE PAIE
elif module == "Lire sa fiche de paie":
    st.title("Comprendre sa fiche de paie")

    # --- Session state pour module actif ---
    if "module_actif" not in st.session_state:
        st.session_state.module_actif = None

    # Fonction pour changer de module
    def afficher_module(module_name):
        st.session_state.module_actif = module_name

    # Mapping des √©l√©ments ‚Üí modules existants
    modules_trigger = {
        "employeur": "Coefficient, valeur du point d'indice et salaire de base",
        "convention": "Coefficient, valeur du point d'indice et salaire de base",
        "qualification": "Coefficient, valeur du point d'indice et salaire de base",
        "ss": "Heures liss√©es",
        "emploi": "Primes",
        "salarie": "üßÆ Simulateur complet",
        "ligne_base": "Coefficient, valeur du point d'indice et salaire de base",
        "ligne_prime": "Primes",
        "ligne_cotis": "üîó Liens utiles",
        "ligne_heures": "V√©rificateur d'heures",
        "ligne_net": "üßÆ Simulateur complet"
    }

    # --- Cr√©ation de boutons HTML cach√©s ---
    for key, module_name in modules_trigger.items():
        st.markdown(f"""
            <button id="trigger_{key}" style="display:none;" onclick="window.parent.postMessage({{module:'{module_name}'}}, '*')">
            </button>
        """, unsafe_allow_html=True)

    # --- SVG interactif fiche de paie ---
    html_code = """
    <svg width="900" height="700" style="border:1px solid #ccc; font-family:sans-serif;">
      <style>
        .header { font-size:20px; font-weight:bold; }
        .subheader { font-size:16px; fill:#333; }
        .block { fill:#f0f0f0; stroke:#333; stroke-width:1; cursor:pointer; }
        .block:hover { fill:#d0eaff; }
        .cell { fill:#ffffff; stroke:#333; stroke-width:1; cursor:pointer; }
        .cell:hover { fill:#f1faff; }
        .text { font-size:14px; }
        .tooltip { font-size:14px; pointer-events:none; }
      </style>

      <!-- Titre et p√©riode -->
      <text x="450" y="30" text-anchor="middle" class="header">BULLETIN DE PAIE</text>
      <text x="450" y="55" text-anchor="middle" class="subheader">P√©riode : 01/09/2025 - 30/09/2025</text>

      <!-- Blocs gauche -->
      <rect x="50" y="80" width="200" height="50" class="block" id="employeur"/>
      <text x="55" y="110" class="text">Employeur : Association XYZ</text>

      <rect x="50" y="140" width="200" height="50" class="block" id="convention"/>
      <text x="55" y="170" class="text">Convention collective : ECLAT</text>

      <rect x="50" y="200" width="200" height="50" class="block" id="qualification"/>
      <text x="55" y="230" class="text">Qualification - coefficient</text>

      <rect x="50" y="260" width="200" height="50" class="block" id="ss"/>
      <text x="55" y="290" class="text">N¬∞ SS & Anciennet√©</text>

      <!-- Blocs droite -->
      <rect x="300" y="80" width="200" height="50" class="block" id="emploi"/>
      <text x="305" y="110" class="text">Emploi</text>

      <rect x="300" y="140" width="200" height="50" class="block" id="salarie"/>
      <text x="305" y="170" class="text">Salari√©-e</text>

      <!-- Tableau avec sous-colonnes Montant -->
      <text x="50" y="330" class="text" font-weight="bold">D√©signation</text>
      <text x="300" y="330" class="text" font-weight="bold">Base</text>
      <text x="400" y="330" class="text" font-weight="bold">Taux</text>
      <text x="550" y="315" class="text" font-weight="bold">Montant</text>
      <text x="500" y="330" class="text">Part salari√©</text>
      <text x="650" y="330" class="text">Part employeur</text>

      <!-- Lignes tableau -->
      <rect x="50" y="340" width="500" height="35" class="cell" id="ligne_base"/>
      <text x="55" y="365" class="text">Salaire de base</text>
      <text x="300" y="365" class="text">2500 ‚Ç¨</text>
      <text x="400" y="365" class="text">100%</text>
      <text x="500" y="365" class="text">2500 ‚Ç¨</text>
      <text x="650" y="365" class="text">2500 ‚Ç¨</text>

      <rect x="50" y="380" width="500" height="35" class="cell" id="ligne_prime"/>
      <text x="55" y="405" class="text">Prime anciennet√©</text>
      <text x="300" y="405" class="text">2500 ‚Ç¨</text>
      <text x="400" y="405" class="text">2%</text>
      <text x="500" y="405" class="text">250 ‚Ç¨</text>
      <text x="650" y="405" class="text">250 ‚Ç¨</text>

      <rect x="50" y="420" width="500" height="35" class="cell" id="ligne_cotis"/>
      <text x="55" y="445" class="text">Cotisations sociales</text>
      <text x="300" y="445" class="text">-</text>
      <text x="400" y="445" class="text">-</text>
      <text x="500" y="445" class="text">-500 ‚Ç¨</text>
      <text x="650" y="445" class="text">-500 ‚Ç¨</text>

      <rect x="50" y="460" width="500" height="35" class="cell" id="ligne_heures"/>
      <text x="55" y="485" class="text">Heures liss√©es</text>
      <text x="300" y="485" class="text">-</text>
      <text x="400" y="485" class="text">-</text>
      <text x="500" y="485" class="text">-</text>
      <text x="650" y="485" class="text">-</text>

      <rect x="50" y="500" width="500" height="35" class="cell" id="ligne_net"/>
      <text x="55" y="525" class="text">Net √† payer</text>
      <text x="300" y="525" class="text">-</text>
      <text x="400" y="525" class="text">-</text>
      <text x="500" y="525" class="text">2350 ‚Ç¨</text>
      <text x="650" y="525" class="text">-</text>

      <!-- Tooltip -->
      <text id="tooltip" x="50" y="570" class="tooltip">Passez la souris sur un √©l√©ment pour voir le d√©tail</text>

      <script>
        const tooltip = document.getElementById('tooltip');
        function showTooltip(msg){ tooltip.innerHTML = msg; }

        const elements = {
            "employeur":"Cliquez pour voir le module Coefficient, valeur du point d'indice et salaire de base",
            "convention":"Cliquez pour voir le module Coefficient, valeur du point d'indice et salaire de base",
            "qualification":"Cliquez pour voir le module Coefficient, valeur du point d'indice et salaire de base",
            "ss":"Cliquez pour voir le module Heures liss√©es",
            "emploi":"Cliquez pour voir le module Primes",
            "salarie":"Cliquez pour voir le module Simulateur complet",
            "ligne_base":"Cliquez pour voir le module Coefficient, valeur du point d'indice et salaire de base",
            "ligne_prime":"Cliquez pour voir le module Primes",
            "ligne_cotis":"Cliquez pour voir le module Liens utiles",
            "ligne_heures":"Cliquez pour voir le module V√©rificateur d'heures",
            "ligne_net":"Cliquez pour voir le module Simulateur complet"
        };

        Object.keys(elements).forEach(id=>{
            const elem=document.getElementById(id);
            elem.addEventListener('mouseover', ()=>showTooltip(elements[id]));
            elem.addEventListener('mouseout', ()=>showTooltip('Passez la souris sur un √©l√©ment pour voir le d√©tail'));
            elem.addEventListener('click', ()=>document.getElementById('trigger_'+id).click());
        });
      </script>
    </svg>
    """
    components.html(html_code, height=700)

# PAGE 2: COEFFICIENT ET SALAIRE DE BASE

elif module == "Coefficient, valeur du point d'indice et salaire de base":
    st.title("Coefficient et salaire de base")
    url_grille = "https://www.legifrance.gouv.fr/conv_coll/article/KALIARTI000048471347#KALIARTI000048471347"
    url_valpoint = "http://legifrance.gouv.fr/conv_coll/article/KALIARTI000050362519#KALIARTI000050362519"
    url_salaire = "https://www.legifrance.gouv.fr/conv_coll/id/KALIARTI000046098173/?idConteneur=KALICONT000005635177"
    
    st.info("""
    **Coefficient :** Renvoie √† la grille de classification de la convention collective ECLAT.  
    Les professeur¬∑e¬∑s sont rattach√©¬∑e¬∑s par d√©faut au groupe B de niveau 2, 
    qui correspond au coefficient 265. Musiques Tangentes rattache ses profs au **groupe D, 
    coefficient 300**, dont le salaire de base est plus √©lev√©.
    """)
    st.success("Nb : Le coefficient conventionnel de base, indiqu√© sur les bulletins de paie, est de 300 mais le coefficient r√©el sur " \
    "lequel est index√© les paies des profs de Musiques Tangentes est de 362,03 (voir \"prime diff√©rentielle\"). Il est donc " \
    "plus √©lev√© que le coefficient maximal de la cat√©gorie Techniciens et agents de ma√Ætrise et s'approche de la cat√©gorie Cadres.")
    st.caption(f"[Lien L√©gifrance - Grille de classification]({url_grille})")
    st.divider()
    st.info("""
    **Valeur du point d'indice** : Valeur fix√©e par la convention collective ECLAT.  
    Au 1er janvier 2025, la valeur du point d'indice est de 7,15‚Ç¨.
    """)
    st.caption(f"[Lien L√©gifrance - Valeur du point d'indice]({url_valpoint})")
    st.divider()
    st.info("""
    Le **salaire de base conventionnel** correspond √† la r√©mun√©ration d‚Äôun¬∑e professeur¬∑e √† temps plein ECLAT.  
    Il est calcul√© en multipliant les heures hebdomadaires liss√©es par la valeur du point d‚Äôindice et le coefficient, puis en divisant 
    le tout par 24 afin de ramener le r√©sultat √† la quotit√© ETP, c‚Äôest-√†-dire la fraction du temps plein effectu√©e.
    """)
    with st.expander("Formule"):
        st.latex("\\text{Salaire de base} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{valeur du point d'indice} \\times \\text{coefficient}}{24}")
    st.caption(f"[Lien L√©gifrance - Salaire conventionnel]({url_salaire})")

# PAGE 3: HEURES LISSEES

elif module == "Heures liss√©es":
    st.title("Calcul des heures liss√©es")

    url_modulation = "https://www.legifrance.gouv.fr/conv_coll/id/KALIARTI000027717752?idConteneur=KALICONT000005635177&origin=list"
    url_etp = "https://www.legifrance.gouv.fr/conv_coll/article/KALIARTI000043234742?utm_"

    st.info("Le **lissage** permet de compenser le creux d'heures pendant les vacances scolaires.")
    with st.expander("Formules"):
        st.latex("\\text{Heures mensuelles liss√©es} = \\frac{(\\text{Heures annuelles} + 10\\% \\text{ CP})}{12}")
        st.latex("\\text{Heures hebdomadaires liss√©es} = \\frac{\\text{Heures mensuelles liss√©es}}{(52 / 12)}")
    st.caption(f"[Lien L√©gifrance - Modulation et annualisation]({url_modulation})")

    st.divider()
    st.info("**L'√©quivalent temps plein - ETP - **permet de comparer les heures des profs (temps plein fix√© √† 24h/semaine par la convention collective ECLAT) √† un temps plein classique (35h/semaine).")
    with st.expander("Formule"):
        st.latex("\\text{Heures mensuelles ETP} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{151,67}}{24}")
    st.caption(f"[Lien L√©gifrance - Temps plein professeur]({url_etp})")
    
    st.divider()
    st.write("**Calculateur :**")
    heures_annuelles_reelles = st.number_input(
        "Heures annuelles r√©ellement effectu√©es (de septembre √† ao√ªt) :", min_value=0.0, step=0.5
    )

    if heures_annuelles_reelles > 0:
        heures_avec_cp = heures_annuelles_reelles * 1.10
        heures_mensuelles = heures_avec_cp / 12
        heures_hebdo = heures_mensuelles / (52/12)
        heures_mensuelles_etp = (heures_hebdo * ((35 * 52)/12)) / 24

        st.markdown("### R√©sultats")
        st.write(f"- Heures annuelles + 10% CP : **{heures_avec_cp:.2f} h**")
        st.write(f"- Heures mensuelles liss√©es : **{heures_mensuelles:.2f} h/mois**")
        st.write(f"- Heures hebdomadaires liss√©es : **{heures_hebdo:.2f} h/semaine**")
        st.write(f"- Heures mensuelles ETP : **{heures_mensuelles_etp:.2f} h**")


# PAGE 4: PRIMES

elif module == "Primes":
    st.title("Calcul des primes")

    st.info("La **prime d'anciennet√©** est calcul√©e sur la base du nombre d'ann√©es d'anciennet√©. Elle commence √† N+1. On compte 2 points par ann√©e d'anciennet√©.")
    st.info("La **prime diff√©rentielle** a √©t√© mise en place afin que tou¬∑te¬∑s les salari√©¬∑e¬∑s soient sur un pied d'√©galit√© en termes de " \
    "r√©mun√©ration, quelle que soit leur anciennet√©.")
    st.caption("Le coefficient diff√©rentiel a √©t√© fix√© lors de la mise en place de la convention collective actuelle, en 2021. " \
    "Est prise en compte la valeur de point d'indice en vigueur √† l'√©poque : 6,32‚Ç¨.")
    with st.expander("Formules"):
        st.latex("\\text{Prime d'anciennet√©} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{valeur du point d'indice} \\times (\\text{anciennet√©} \\times 2)}{24}")
        st.latex("\\text{Prime diff√©rentielle} = \\frac{\\text{valeur max entre 0 et} \\text{(62.03 - (}\\text{anciennet√©} \\times 2)) \\times \\text{valeur du point d'indice} \\times \\text{heures hebdo liss√©es}}{24}")
    
    st.divider()
    st.write("**Calculateur :**")
    date_entree = st.date_input(
        "Date d'entr√©e dans l'√©cole :", min_value=date(1980,1,1), max_value=date.today()
    )
    heures_lissees = st.number_input("Heures hebdomadaires liss√©es :", min_value=0.0, step=0.5)
    valeur_point = 7.15
    st.caption(f"Valeur du point d'indice au 1er janvier 2025 : {valeur_point} ‚Ç¨.")

    # Anciennet√©
    today = datetime.today().date()
    anciennete = today.year - date_entree.year - ((today.month, today.day) < (date_entree.month, date_entree.day))

    if heures_lissees > 0:
        prime_anciennete = heures_lissees * valeur_point * (anciennete * 2) / 24
        prime_diff = max(0, (62.03 - (anciennete * 2))) * 6.32 * heures_lissees / 24

        st.markdown("### R√©sultats")
        st.write(f"- Anciennet√© calcul√©e : **{anciennete} ans**")
        st.write(f"- Prime d‚Äôanciennet√© : **{prime_anciennete:.2f} ‚Ç¨**")
        st.write(f"- Prime diff√©rentielle : **{prime_diff:.2f} ‚Ç¨**")


# PAGE 5: VERIFICATEUR HEURES ANNUELLES

elif module == "V√©rificateur d'heures":
    
    def hhmm_to_decimal(hhmm):
        """Convertit '03:30' en nombre d√©cimal d‚Äôheures"""
        hh, mm = hhmm.strip().split(":")
        return int(hh) + int(mm)/60

    def parse_fichier_multi_profs(fichier_txt):
        """
        Retourne :
        heures_profs = { "Pr√©nom NOM": [(date, heures), ...], ... }
        total_annuels = { "Pr√©nom NOM": total_annee, ... }
        """
        heures_profs = {}
        total_annuels = {}
        lines = fichier_txt.splitlines()
        current_prof = None
        heures_courantes = []

        for line in lines:
            line = line.strip()
            if not line:
                continue

            if not re.match(r"\d{2}-\d{2}-\d{4}", line) and not line.startswith("Total"):
                if current_prof is not None:
                    heures_profs[current_prof] = heures_courantes
                    total_annuels[current_prof] = sum(h for _, h in heures_courantes)
                current_prof = line
                heures_courantes = []

            match = re.match(r"(\d{2}-\d{2}-\d{4})\s+total jour\s*:\s*(\d{2}:\d{2})", line)
            if match:
                date_str, hhmm = match.groups()
                heures_courantes.append((date_str, hhmm_to_decimal(hhmm)))

            elif line.startswith("Total P√©riode"):
                match_total = re.search(r"([\d,\.]+)", line)
                if match_total:
                    total_annuel = float(match_total.group(1).replace(",", "."))
                    total_annuels[current_prof] = total_annuel

        if current_prof is not None:
            heures_profs[current_prof] = heures_courantes
            if current_prof not in total_annuels:
                total_annuels[current_prof] = sum(h for _, h in heures_courantes)

        return heures_profs, total_annuels

    # Lecture backend
    DATA_FILE = Path(__file__).parent / "heures_2526.txt"

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        contenu = f.read()

    heures_profs, total_annuels = parse_fichier_multi_profs(contenu)

    st.title("V√©rificateur heures annuelles r√©elles")

    prof_selectionne = st.selectbox("S√©lectionnez votre nom :", list(heures_profs.keys()))

    if prof_selectionne:
        data_semaine = heures_profs[prof_selectionne]
        dates = [d for d, _ in data_semaine]
        heures = [h for _, h in data_semaine]
        total_annuel = total_annuels[prof_selectionne]

        st.markdown(f"### Total annuel : **{total_annuel:.2f} h**")

        # Tableau avec dates r√©elles     
        df_heures = pd.DataFrame({
            "Date": dates,
            "Heures": heures
        })
        jours_fr = {
            "Monday": "Lundi",
            "Tuesday": "Mardi",
            "Wednesday": "Mercredi",
            "Thursday": "Jeudi",
            "Friday": "Vendredi",
            "Saturday": "Samedi",
            "Sunday": "Dimanche"
        }
        df_heures['Jour'] = df_heures['Date'].apply(
            lambda x: jours_fr[datetime.strptime(x, "%d-%m-%Y").strftime("%A")]
        )
        df_heures = df_heures[['Jour', 'Date', 'Heures']]
        st.dataframe(df_heures, use_container_width=True)

        # Export PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph(f"Relev√© heures annuelles - {prof_selectionne}", styles["Title"]))
        story.append(Spacer(1,12))
        story.append(Paragraph(f"Total annuel : {total_annuel:.2f} h", styles["Normal"]))
        story.append(Spacer(1,12))

        for date_str, h in data_semaine:
            story.append(Paragraph(f"{date_str} : {h:.2f} h", styles["Normal"]))

        doc.build(story)
        pdf_data = buffer.getvalue()

        st.download_button(
            label="T√©l√©charger le PDF r√©capitulatif",
            data=pdf_data,
            file_name=f"heures_{prof_selectionne.replace(' ','_')}.pdf",
            mime="application/pdf"
        )


# PAGE 6: SIMULATEUR COMPLET

elif module == "üßÆ Simulateur complet":
    st.title("üßÆ Simulateur complet")
    heures_annuelles = st.number_input("Heures annuelles r√©ellement effectu√©es :", min_value=0.0, step=0.5)
    date_entree = st.date_input("Date d'entr√©e dans l'√©cole :", min_value=date(1980,1,1), max_value=date.today())

    if heures_annuelles > 0:
        # Heures liss√©es
        heures_avec_cp = heures_annuelles * 1.10
        heures_mensuelles = heures_avec_cp / 12
        heures_hebdo = heures_mensuelles / (52/12)
        heures_mensuelles_etp = (heures_hebdo * ((35 * 52)/12)) / 24

        # Anciennet√© & primes
        valeur_point = 7.15
        today = datetime.today().date()
        anciennete = today.year - date_entree.year - ((today.month, today.day) < (date_entree.month, date_entree.day))
        prime_anciennete = heures_hebdo * valeur_point * (anciennete * 2) / 24
        prime_diff = max(0, (62.03 - (anciennete * 2))) * 6.32 * heures_hebdo / 24

        # Salaire brut
        salaire_base = (heures_hebdo * valeur_point * 300) / 24
        salaire_brut_total = salaire_base + prime_anciennete + prime_diff

        # Heures r√©elles mensuelles
        coef_etp_par_heure_reelle = 1.36
        heures_mensuelles_reelles = heures_mensuelles_etp / coef_etp_par_heure_reelle
        taux_horaire_brut_reel = salaire_brut_total / heures_mensuelles_reelles

        st.markdown("### R√©sultats")
        st.write(f"- Heures mensuelles liss√©es : **{heures_mensuelles:.2f} h/mois**")
        st.write(f"- Heures hebdomadaires liss√©es : **{heures_hebdo:.2f} h/semaine**")
        st.write(f"- Heures mensuelles ETP : **{heures_mensuelles_etp:.2f} h**")
        st.write(f"- Anciennet√© : **{anciennete} ans**")
        st.write(f"- Prime d‚Äôanciennet√© : **{prime_anciennete:.2f} ‚Ç¨**")
        st.write(f"- Prime diff√©rentielle : **{prime_diff:.2f} ‚Ç¨**")
        st.write(f"- Salaire brut total estim√© : **{salaire_brut_total:.2f} ‚Ç¨**")
        st.write(f"- Taux horaire brut r√©el : **{taux_horaire_brut_reel:.2f} ‚Ç¨/h**")

        # Export PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph("Simulation de salaire - Convention ECLAT", styles["Title"]))
        story.append(Spacer(1, 12))
        story.append(Paragraph(f"Heures annuelles r√©elles : {heures_annuelles:.2f} h", styles["Normal"]))
        story.append(Paragraph(f"Heures mensuelles liss√©es : {heures_mensuelles:.2f} h/mois", styles["Normal"]))
        story.append(Paragraph(f"Heures hebdomadaires liss√©es : {heures_hebdo:.2f} h/semaine", styles["Normal"]))
        story.append(Paragraph(f"Heures mensuelles ETP : {heures_mensuelles_etp:.2f} h", styles["Normal"]))
        story.append(Paragraph(f"Heures mensuelles r√©elles (√©quivalentes) : {heures_mensuelles_reelles:.2f} h", styles["Normal"]))
        story.append(Paragraph(f"Anciennet√© : {anciennete} ans", styles["Normal"]))
        story.append(Spacer(1, 12))
        story.append(Paragraph(f"Salaire de base : {salaire_base:.2f} ‚Ç¨", styles["Normal"]))
        story.append(Paragraph(f"Prime d‚Äôanciennet√© : {prime_anciennete:.2f} ‚Ç¨", styles["Normal"]))
        story.append(Paragraph(f"Prime diff√©rentielle : {prime_diff:.2f} ‚Ç¨", styles["Normal"]))
        story.append(Paragraph(f"<b>Salaire brut total : {salaire_brut_total:.2f} ‚Ç¨</b>", styles["Heading2"]))
        story.append(Spacer(1, 12))
        story.append(Paragraph(f"Taux horaire brut r√©el : {taux_horaire_brut_reel:.2f} ‚Ç¨/h", styles["Normal"]))

        doc.build(story)
        pdf_data = buffer.getvalue()

        st.download_button(
            label="üìÑ T√©l√©charger le PDF r√©capitulatif",
            data=pdf_data,
            file_name="simulation_eclat.pdf",
            mime="application/pdf"
        )


# PAGE 7: LIENS UTILES

elif module == "üîó Liens utiles":
    st.title("üîó Liens utiles")
    
    st.write("### 1. Textes et avenants")
    url_eclat = "https://www.legifrance.gouv.fr/conv_coll/id/KALICONT000005635177"
    st.markdown(f"- [Convention collective ECLAT - IDCC 1518]({url_eclat})")

    st.write("### 2. Formules")

    with st.expander("Salaire de base"):
        st.latex("\\text{Salaire de base} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{valeur du point d'indice} \\times \\text{coefficient}}{24}")
    with st.expander("Heures mensuelles liss√©es"):
         st.latex("\\text{Heures mensuelles liss√©es} = \\frac{(\\text{Heures annuelles} + 10\\% \\text{ CP})}{12}")
    with st.expander("Heures hebdomadaires liss√©es"):
        st.latex("\\text{Heures hebdomadaires liss√©es} = \\frac{\\text{Heures mensuelles liss√©es}}{(52 / 12)}")
    with st.expander("Heures mensuelles ETP"):
        st.latex("\\text{Heures mensuelles ETP} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{151,67}}{24}")
    with st.expander("Prime d'anciennet√©"): 
        st.latex("\\text{Prime d'anciennet√©} = \\frac{\\text{Heures hebdo liss√©es} \\times \\text{valeur du point d'indice} \\times (\\text{anciennet√©} \\times 2)}{24}")
    with st.expander("Prime diff√©rentielle"):
        st.latex("\\text{Prime diff√©rentielle} = \\frac{\\text{valeur max entre 0 et} \\text{(62.03 - (}\\text{anciennet√©} \\times 2)) \\times \\text{valeur du point d'indice} \\times \\text{heures hebdo liss√©es}}{24}")